rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow admins to read and write all documents
    match /{document=**} {
      allow read, write: if hasAnyRole(["ADMIN", "OWNER"]);
    }

    // Rowy: Allow signed in users to read Rowy configuration and admins to write
    match /_rowy_/{docId} {
      allow read: if request.auth.token.roles.size() > 0;
      allow write: if hasAnyRole(["ADMIN", "OWNER"]);
    	match /{document=**} {
        allow read: if request.auth.token.roles.size() > 0;
        allow write: if hasAnyRole(["ADMIN", "OWNER"]);
      }
    }
    // Rowy: Allow users to edit their settings
    match /_rowy_/userManagement/users/{userId} {
      allow get, update, delete: if isDocOwner(userId);
      allow create: if request.auth.token.roles.size() > 0;
    }
    // Rowy: Allow public to read public Rowy configuration
    match /_rowy_/publicSettings {
      allow get: if true;
    }

    // Rowy: Utility functions
    function isDocOwner(docId) {
      return request.auth != null && (request.auth.uid == resource.id || request.auth.uid == docId);
    }
    function hasAnyRole(roles) {
      return request.auth != null && request.auth.token.roles.hasAny(roles);
    }

  	match /guests/{apartmentID} {
    	allow write, update, delete : if request.auth != null;
      match /data/{id=**} {
      	allow read, write, update, delete : if request.auth != null && get(/databases/$(database)/documents/guests/$(apartmentID)).data.userId == request.auth.uid;
      }
    }
    match /events/{event} {
      allow write, update, delete : if request.auth != null;
      allow read;
      match /data/private {
      	allow read, write, update, delete : if request.auth != null && get(/databases/$(database)/documents/events/$(event)).data.userId == request.auth.uid;
      }
      match /data/public {
      	allow read;
        allow write, update, delete : if request.auth != null;
      }
    }
   	match /apartments/{apartment} {
      allow read;
      allow write, delete, update : if request.auth != null;
    }
    match /users/{userId}{
    	allow create
      allow read: if request.auth.uid != null
      allow write, update: if request.auth.uid == userId
    }
  }
}
